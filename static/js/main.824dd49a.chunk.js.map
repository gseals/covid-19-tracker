{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App/App.js","index.js","App/App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/covidIMG.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","moment","format","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","dF","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","coronaImage","alt","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.824dd49a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport {\n  Card, CardContent, Typography, Grid,\n} from '@material-ui/core';\nimport moment from 'moment';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nimport styles from './Cards.module.css';\n\nconst Cards = ({\n  data:\n{\n  confirmed, recovered, deaths, lastUpdate,\n},\n}) => {\n  if (!confirmed) {\n    return 'Loading...';\n  }\n\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={3} justify=\"center\">\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={confirmed.value}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">As of: {moment(lastUpdate).format('LLLL')}</Typography>\n            <Typography variant=\"body2\">Number of active cases of CoVID-19</Typography>\n          </CardContent>\n        </Grid>\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={recovered.value}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">As of: {moment(lastUpdate).format('LLLL')}</Typography>\n            <Typography variant=\"body2\">Number of recoveries from CoVID-19</Typography>\n          </CardContent>\n        </Grid>\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={deaths.value}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">As of: {moment(lastUpdate).format('LLLL')}</Typography>\n            <Typography variant=\"body2\">Number of deaths caused by CoVID-19</Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Cards;\n","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\n\nconst fetchData = async (country) => {\n  let changeableUrl = url;\n\n  if (country) {\n    changeableUrl = `${url}/countries/${country}`;\n  }\n\n  try {\n    const {\n      data: {\n        confirmed, recovered, deaths, lastUpdate,\n      },\n    } = await axios.get(changeableUrl);\n\n    return {\n      confirmed,\n      recovered,\n      deaths,\n      lastUpdate,\n    };\n  } catch (error) {\n    return error;\n  }\n};\n\nconst fetchDailyData = async () => {\n  try {\n    const { data } = await axios.get(`${url}/daily`);\n\n    const modifiedData = data.map((dailyData) => ({\n      confirmed: dailyData.confirmed.total,\n      deaths: dailyData.deaths.total,\n      date: dailyData.reportDate,\n    }));\n\n    return modifiedData;\n  } catch (error) {\n    return error;\n  }\n};\n\nconst fetchCountries = async () => {\n  try {\n    const { data: { countries } } = await axios.get(`${url}/countries`);\n\n    return countries.map((country) => country.name);\n  } catch (error) {\n    return error;\n  }\n};\n\nexport default { fetchData, fetchDailyData, fetchCountries };\n","import React, { useState, useEffect } from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\nimport dF from '../../api/index';\n\nimport styles from './Chart.module.css';\n\nconst Chart = ({ country, data: { confirmed, recovered, deaths } }) => {\n  const [dailyData, setDailyData] = useState({});\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await dF.fetchDailyData());\n    };\n\n    fetchAPI();\n  }, []);\n\n  const lineChart = (\n    dailyData.length\n      ? (\n    <Line\n    data={{\n      labels: dailyData.map(({ date }) => date),\n      datasets: [{\n        // eslint-disable-next-line no-shadow\n        data: dailyData.map(({ confirmed }) => confirmed),\n        label: 'Infected',\n        borderColor: '#3333ff',\n        fill: true,\n      }, {\n        // eslint-disable-next-line no-shadow\n        data: dailyData.map(({ deaths }) => deaths),\n        label: 'Deaths',\n        borderColor: 'red',\n        backgroundColor: 'rgba)255, 0, 0, 0.5)',\n        fill: true,\n      }],\n    }}\n    />\n      ) : null\n  );\n\n  const barChart = (\n    confirmed\n      ? (\n      <Bar\n        data={{\n          labels: ['Infected', 'Recovered', 'Deaths'],\n          datasets: [{\n            label: 'People',\n            backgroundColor: [\n              'rgba(0, 0, 255, 0.5)',\n              'rgba(0, 255, 0, 0.5)',\n              'rgba(255, 0, 0, 0.5)',\n            ],\n            data: [confirmed.value, recovered.value, deaths.value],\n          }],\n        }}\n        options={{\n          legend: { display: false },\n          title: { display: true, text: `Current state in ${country}` },\n        }}\n      />\n      ) : null\n  );\n\n  return (\n    <div className={styles.container}>\n      { country ? barChart : lineChart }\n    </div>\n  );\n};\n\nexport default Chart;\n","import React, { useState, useEffect } from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\n\nimport dF from '../../api/index';\n\nimport styles from './CountryPicker.module.css';\n\nconst CountryPicker = ({ handleCountryChange }) => {\n  const [fetchedCountries, setFetchedCountries] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setFetchedCountries(await dF.fetchCountries());\n    };\n\n    fetchAPI();\n  }, [setFetchedCountries]);\n\n  return (\n    <FormControl className={styles.formControl}>\n      <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n        <option value=\"\">Global</option>\n        {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\n      </NativeSelect>\n    </FormControl>\n  );\n};\n\nexport default CountryPicker;\n","import React, { Component } from 'react';\n\nimport { Cards, Chart, CountryPicker } from '../components';\nimport styles from './App.module.css';\nimport dF from '../api/index';\n\nimport coronaImage from '../images/covidIMG.png';\n\nclass App extends Component {\n  state = {\n    data: [],\n    country: '',\n  }\n\n  async componentDidMount() {\n    const fetchedData = await dF.fetchData();\n    this.setState({ data: fetchedData });\n  }\n\n  handleCountryChange = async (country) => {\n    // fetch the data\n    const fetchedData = await dF.fetchData(country);\n    // set the state\n    this.setState({ data: fetchedData, country });\n  }\n\n  render() {\n    const { data, country } = this.state;\n\n    return (\n      <div className={styles.container}>\n        <img className={styles.image} src={coronaImage} alt=\"CoVID-19\" />\n        <Cards data={data}/>\n        <CountryPicker handleCountryChange={this.handleCountryChange}/>\n        <Chart data={data} country={country}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container___P6pN\",\"image\":\"App_image__1pJJq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","module.exports = __webpack_public_path__ + \"static/media/covidIMG.d7265326.png\";"],"sourceRoot":""}